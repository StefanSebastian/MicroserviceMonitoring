Spring Microservice - Rajes RV 
-> theory about microservices and scaling
- advantages, disadvantages, strategies 
introduces the term "predictive autoscaling" which means
analysing historic traffic patterns + current data to make 
predictions on scaling decisions 
gives as example : Netflix Scryer

https://netflixtechblog.com/scryer-netflixs-predictive-auto-scaling-engine-a3f8fc922270
https://netflixtechblog.com/scryer-netflixs-predictive-auto-scaling-engine-part-2-bb9c4f9b9385
- blogposts from netflix describing their autoscaling tool 
- is not open source!
- uses as a metric : requests per second 
- cluster size prediction is : rps / throughput
throughput - determined by benchmarking the service 
- prediction based on 2 algorithms : Fast Fourier Transformation + linear regression
- FFT sol
* treats input as a sinusoidal, filters out noise 
* to predict a value: find a past value exactly 1 period away
* is capable of ignoring outages 
- Linear regression 
* picks data points at the same time but different days
* more data points for more recent days 
* improves on FFT by detecting traffic spikes 

Performance Modeling for Cloud Microservice Applications
https://www.researchgate.net/publication/332234622_Performance_Modeling_for_Cloud_Microservice_Applications
- definition of metric : microservice capacity 
= maximal rate of requests that can be served without violating SLO
- some demo of benchmarking tools 

The DevOps Handbook:: How to Create World-Class Agility, Reliability, and ...
De Gene Kim, Jez Humble, Patrick Debois, John Willis
- Scryer is given as an example for prediction of anomalies in non-Gaussian data set 
Scryer addressed 3 problems with AAS:
- rapid spikes in demand : service startup times could take 10 -> 45 mins => 
additional compute capacity was delivered too late
- after outages AAS removed too much compute capacity
- AAS didnt factor in known usage traffic patterns

